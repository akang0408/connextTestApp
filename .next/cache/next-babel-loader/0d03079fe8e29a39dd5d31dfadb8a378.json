{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\n\n/*eslint-disable*/\nimport React, { useEffect, useState } from 'react';\nimport Header from '../components/Header';\nimport fetch from 'isomorphic-unfetch';\nimport Task from '../components/Tasks';\nexport default function Home(props) {\n  var _useState = useState(''),\n      id = _useState[0],\n      setId = _useState[1];\n\n  var _useState2 = useState([]),\n      taskArr = _useState2[0],\n      getTasks = _useState2[1];\n\n  var _useState3 = useState(''),\n      newTask = _useState3[0],\n      setTask = _useState3[1];\n\n  useEffect(function () {\n    var cookie = window.document.cookie.split(';')[0].slice(3);\n    console.log('Use Effect Cookie:', cookie);\n    setId(cookie);\n  });\n  useEffect(function () {\n    fetch(\"/home/\".concat(id)).then(function (data) {\n      return data.json();\n    }).then(function (res) {\n      getTasks(res);\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  }, [id]);\n  var allTasks = taskArr.map(function (el) {\n    return __jsx(Task, {\n      id: el.id,\n      task: el.tasks\n    });\n  });\n\n  var handleSubmit = function handleSubmit() {\n    var bodyObj = {\n      id: id,\n      task: newTask\n    };\n    fetch(\"/home/\", {\n      method: 'POST'\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(Header, null), __jsx(\"span\", null, \"New Task: \"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"newTask\",\n    value: newTask,\n    onChange: function onChange(e) {\n      return setTask(e.target.value);\n    }\n  }), __jsx(\"button\", null, \"Submit\"), allTasks, __jsx(\"h3\", null, props.quote), __jsx(\"h5\", null, \"-\", props.author));\n}\n\nHome.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.quotable.io/random'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Quote data fetched. content is: \".concat(data.content));\n          return _context.abrupt(\"return\", {\n            quote: data.content,\n            author: data.author\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}; // useEffect(() => {\n//   fetch(`/home/${id}`)\n//     .then((data) => data.json())\n//     .then((res) => {\n//       const arr = res.map((el) => {\n//         return (<Task\n//           id={el.id}\n//           task={el.tasks}\n//         />)\n//       })\n//       getTasks(arr);\n//       return;\n//     })\n// }, [taskArr]);","map":{"version":3,"sources":["/Users/Eli/Coding/connextTestApp/pages/home.js"],"names":["React","useEffect","useState","Header","fetch","Task","Home","props","id","setId","taskArr","getTasks","newTask","setTask","cookie","window","document","split","slice","console","log","then","data","json","res","err","allTasks","map","el","tasks","handleSubmit","bodyObj","task","method","e","target","value","quote","author","getInitialProps","content"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA,kBAEdL,QAAQ,CAAC,EAAD,CAFM;AAAA,MAE3BM,EAF2B;AAAA,MAEvBC,KAFuB;;AAAA,mBAGNP,QAAQ,CAAC,EAAD,CAHF;AAAA,MAG3BQ,OAH2B;AAAA,MAGlBC,QAHkB;;AAAA,mBAIPT,QAAQ,CAAC,EAAD,CAJD;AAAA,MAI3BU,OAJ2B;AAAA,MAIlBC,OAJkB;;AAMlCZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMa,MAAM,GAAGC,MAAM,CAACC,QAAP,CAAgBF,MAAhB,CAAuBG,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,EAAqCC,KAArC,CAA2C,CAA3C,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCN,MAAlC;AACAL,IAAAA,KAAK,CAACK,MAAD,CAAL;AACD,GAJQ,CAAT;AAMAb,EAAAA,SAAS,CAAC,YAAM;AACdG,IAAAA,KAAK,iBAAUI,EAAV,EAAL,CACGa,IADH,CACQ,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACC,IAAL,EAAV;AAAA,KADR,EAEGF,IAFH,CAEQ,UAACG,GAAD,EAAS;AACbb,MAAAA,QAAQ,CAACa,GAAD,CAAR;AACD,KAJH,WAKS,UAACC,GAAD;AAAA,aAASN,OAAO,CAACC,GAAR,CAAYK,GAAZ,CAAT;AAAA,KALT;AAMD,GAPQ,EAON,CAACjB,EAAD,CAPM,CAAT;AASA,MAAMkB,QAAQ,GAAGhB,OAAO,CAACiB,GAAR,CAAY,UAACC,EAAD,EAAQ;AACnC,WAAQ,MAAC,IAAD;AACN,MAAA,EAAE,EAAEA,EAAE,CAACpB,EADD;AAEN,MAAA,IAAI,EAAEoB,EAAE,CAACC;AAFH,MAAR;AAID,GALgB,CAAjB;;AAOA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAMC,OAAO,GAAG;AACdvB,MAAAA,EAAE,EAAFA,EADc;AAEdwB,MAAAA,IAAI,EAAEpB;AAFQ,KAAhB;AAKAR,IAAAA,KAAK,WAAW;AACd6B,MAAAA,MAAM,EAAE;AADM,KAAX,CAAL;AAID,GAVD;;AAYA,SACE,mBACE,MAAC,MAAD,OADF,EAEE,iCAFF,EAGE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,SAFL;AAGE,IAAA,KAAK,EAAErB,OAHT;AAIE,IAAA,QAAQ,EAAE,kBAAAsB,CAAC;AAAA,aAAIrB,OAAO,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AAAA;AAJb,IAHF,EASE,+BATF,EAUGV,QAVH,EAWE,kBAAKnB,KAAK,CAAC8B,KAAX,CAXF,EAYE,uBAAM9B,KAAK,CAAC+B,MAAZ,CAZF,CADF;AAgBD;;AAEDhC,IAAI,CAACiC,eAAL,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACHnC,KAAK,CAAC,gCAAD,CADF;;AAAA;AACfoB,UAAAA,GADe;AAAA;AAAA,2CAEFA,GAAG,CAACD,IAAJ,EAFE;;AAAA;AAEfD,UAAAA,IAFe;AAGrBH,UAAAA,OAAO,CAACC,GAAR,2CAA+CE,IAAI,CAACkB,OAApD;AAHqB,2CAKd;AACLH,YAAAA,KAAK,EAAEf,IAAI,CAACkB,OADP;AAELF,YAAAA,MAAM,EAAEhB,IAAI,CAACgB;AAFR,WALc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/*eslint-disable*/\nimport React, { useEffect, useState } from 'react'\nimport Header from '../components/Header';\nimport fetch from 'isomorphic-unfetch';\nimport Task from '../components/Tasks';\n\nexport default function Home(props) {\n\n  const [id, setId] = useState('');\n  const [taskArr, getTasks] = useState([]);\n  const [newTask, setTask] = useState('');\n\n  useEffect(() => {\n    const cookie = window.document.cookie.split(';')[0].slice(3);\n    console.log('Use Effect Cookie:', cookie);\n    setId(cookie);\n  });\n\n  useEffect(() => {\n    fetch(`/home/${id}`)\n      .then((data) => data.json())\n      .then((res) => {\n        getTasks(res);\n      })\n      .catch((err) => console.log(err))\n  }, [id]);\n\n  const allTasks = taskArr.map((el) => {\n    return (<Task\n      id={el.id}\n      task={el.tasks}\n    />)\n  })\n\n  const handleSubmit = () => {\n    const bodyObj = {\n      id,\n      task: newTask\n    }\n\n    fetch(`/home/`, {\n      method: 'POST',\n      \n    })\n  }\n\n  return (\n    <div>\n      <Header />\n      <span>New Task: </span>\n      <input\n        type=\"text\"\n        id=\"newTask\"\n        value={newTask}\n        onChange={e => setTask(e.target.value)}\n      />\n      <button>Submit</button>\n      {allTasks}\n      <h3>{props.quote}</h3> \n      <h5>-{props.author}</h5>\n    </div>\n  );\n}\n\nHome.getInitialProps = async function() {\n  const res = await fetch('https://api.quotable.io/random');\n  const data = await res.json();\n  console.log(`Quote data fetched. content is: ${data.content}`);\n\n  return { \n    quote: data.content,\n    author: data.author,\n  };\n}\n\n// useEffect(() => {\n//   fetch(`/home/${id}`)\n//     .then((data) => data.json())\n//     .then((res) => {\n//       const arr = res.map((el) => {\n//         return (<Task\n//           id={el.id}\n//           task={el.tasks}\n//         />)\n//       })\n//       getTasks(arr);\n//       return;\n//     })\n// }, [taskArr]);"]},"metadata":{},"sourceType":"module"}