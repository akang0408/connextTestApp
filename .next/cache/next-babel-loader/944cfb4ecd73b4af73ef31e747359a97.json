{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\n/*eslint-disable*/\nimport { useState } from 'react';\nexport default function CreateUser() {\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n\n  const handleSubmit = event => {\n    const bodyObj = {\n      name,\n      email,\n      username,\n      password\n    };\n    fetch('/auth/create', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyObj)\n    }).then(res => res.json()).then(user_id => {\n      const {\n        0: id,\n        1: setId\n      } = useState(user_id);\n    }).catch(err => {\n      throw new Error(`${err}`);\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"Register\"), __jsx(\"div\", null, __jsx(\"span\", null, \"name: \"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"registerName\",\n    value: name,\n    onChange: e => setName(e.target.value)\n  })), __jsx(\"div\", null, __jsx(\"span\", null, \"email: \"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"registerEmail\",\n    value: email,\n    onChange: e => setEmail(e.target.value)\n  })), __jsx(\"div\", null, __jsx(\"span\", null, \"username: \"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"registerUsername\",\n    value: username,\n    onChange: e => setUsername(e.target.value)\n  })), __jsx(\"div\", null, __jsx(\"span\", null, \"password: \"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"registerPassword\",\n    value: password,\n    onChange: e => setPassword(e.target.value)\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    onClick: handleSubmit\n  }, \"register\"));\n}","map":{"version":3,"sources":["/Users/Eli/Coding/connextTestApp/pages/create-user.js"],"names":["useState","CreateUser","name","setName","email","setEmail","username","setUsername","password","setPassword","handleSubmit","event","bodyObj","fetch","method","headers","body","JSON","stringify","then","res","json","user_id","id","setId","catch","err","Error","e","target","value"],"mappings":";;;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,UAAT,GAAsB;AAEnC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBH,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACI,KAAD;AAAA,OAAQC;AAAR,MAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMU,YAAY,GAAIC,KAAD,IAAW;AAC9B,UAAMC,OAAO,GAAG;AACdV,MAAAA,IADc;AAEdE,MAAAA,KAFc;AAGdE,MAAAA,QAHc;AAIdE,MAAAA;AAJc,KAAhB;AAOAK,IAAAA,KAAK,CAAC,cAAD,EAAiB;AACpBC,MAAAA,MAAM,EAAE,MADY;AAEpBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFW;AAKpBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf;AALc,KAAjB,CAAL,CAOGO,IAPH,CAOSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPjB,EAQGF,IARH,CAQSG,OAAD,IAAa;AACjB,YAAM;AAAA,WAACC,EAAD;AAAA,WAAKC;AAAL,UAAcxB,QAAQ,CAACsB,OAAD,CAA5B;AACD,KAVH,EAWGG,KAXH,CAWUC,GAAD,IAAS;AACd,YAAM,IAAIC,KAAJ,CAAW,GAAED,GAAI,EAAjB,CAAN;AACD,KAbH;AAcD,GAtBD;;AAwBA,SACE,mBACE,6BADF,EAEE,mBACE,6BADF,EAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,cAFL;AAGE,IAAA,KAAK,EAAExB,IAHT;AAIE,IAAA,QAAQ,EAAE0B,CAAC,IAAIzB,OAAO,CAACyB,CAAC,CAACC,MAAF,CAASC,KAAV;AAJxB,IAFF,CAFF,EAWE,mBACE,8BADF,EAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,eAFL;AAGE,IAAA,KAAK,EAAE1B,KAHT;AAIE,IAAA,QAAQ,EAAEwB,CAAC,IAAIvB,QAAQ,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV;AAJzB,IAFF,CAXF,EAoBE,mBACE,iCADF,EAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,kBAFL;AAGE,IAAA,KAAK,EAAExB,QAHT;AAIE,IAAA,QAAQ,EAAEsB,CAAC,IAAIrB,WAAW,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ5B,IAFF,CApBF,EA6BE,mBACE,iCADF,EAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,kBAFL;AAGE,IAAA,KAAK,EAAEtB,QAHT;AAIE,IAAA,QAAQ,EAAEoB,CAAC,IAAInB,WAAW,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ5B,IAFF,CA7BF,EAsCE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEpB;AAA/B,gBAtCF,CADF;AA0CD","sourcesContent":["/*eslint-disable*/\nimport { useState } from 'react';\n\nexport default function CreateUser() {\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = (event) => {\n    const bodyObj = {\n      name,\n      email,\n      username,\n      password,\n    };\n\n    fetch('/auth/create', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyObj),\n    })\n      .then((res) => res.json())\n      .then((user_id) => {\n        const [id, setId] = useState(user_id);\n      })\n      .catch((err) => { \n        throw new Error(`${err}`)\n      });\n  };\n\n  return (\n    <div>\n      <h1>Register</h1>\n      <div>\n        <span>name: </span>\n        <input \n          type=\"text\"\n          id=\"registerName\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n      </div>\n      <div>\n        <span>email: </span>\n        <input\n          type=\"text\"\n          id=\"registerEmail\"\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n        />\n      </div>\n      <div>\n        <span>username: </span>\n        <input\n          type=\"text\"\n          id=\"registerUsername\"\n          value={username}\n          onChange={e => setUsername(e.target.value)}\n        />\n      </div>\n      <div>\n        <span>password: </span>\n        <input\n          type=\"text\"\n          id=\"registerPassword\"\n          value={password}\n          onChange={e => setPassword(e.target.value)}\n        />\n      </div>\n      <button type=\"submit\" onClick={handleSubmit}>register</button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}